(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{418:function(s,t,n){"use strict";n.r(t);var a=n(2),e=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h3",{attrs:{id:"一、mixin-是什么"}},[s._v("一、mixin 是什么")]),s._v(" "),t("ul",[t("li",[s._v("mixin 是面向对象程序设计语言中的类，提供了方法的实现。其他类可以访问 mixin 类的方法而不必成为其子类；")]),s._v(" "),t("li",[s._v("mixin 类通常作为功能模块使用，在需要该功能时“混入”，有利于代码复用又避免了多继承的复杂。")]),s._v(" "),t("li",[s._v("本质就是一个 JS 对象，可以包含组件中的任意功能选项，如 data、components、methods、creaded、computed 以及生命周期函数等等。")]),s._v(" "),t("li",[s._v("只需要将共用的功能以对象的方式传入 mixins 选项中，当组件使用 mixins 对象时所有 mixins 对象的对象都将被混入该组件本身的选项中来。")]),s._v(" "),t("li",[t("strong",[s._v("局部混入")])])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" mixin1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'./mixin1'")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[t("strong",[s._v("全局混入")])])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("Vue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mixin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("created")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'全局混入'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("ul",[t("li",[t("strong",[s._v("注意：当组件存在与 mixin 对象相同的选项的时候，进行递归合并的时候组件的选项会覆盖 mixin 的选项；但是如果相同的选项为生命周期钩子的时候，会合并成一个数组，先执行 mixin 的钩子，再执行组件的钩子。")])])]),s._v(" "),t("h3",{attrs:{id:"二、使用场景"}},[s._v("二、使用场景")]),s._v(" "),t("p",[s._v("在开发中，经常会遇到在不同的组件中用到相同或者相似的代码，这些代码的功能相对独立；")]),s._v(" "),t("h3",{attrs:{id:"三、原理分析"}},[s._v("三、原理分析")]),s._v(" "),t("ul",[t("li",[s._v("优先递归处理 mixins；")]),s._v(" "),t("li",[s._v("先遍历合并 parent 中的 key，调用 mergeField 方法进行合并，然后保存在变量 options；")]),s._v(" "),t("li",[s._v("再遍历 child，合并补上 parent 中没有的 key，调用 mergeField 方法进行合并，保存在变量 options；")]),s._v(" "),t("li",[s._v("通过 mergeField 函数进行合并；")]),s._v(" "),t("li",[s._v("合并策略包括：替换型、合并型、队列型、叠加型；")]),s._v(" "),t("li",[s._v("替换行策略有：props、methods、inject、computed；")]),s._v(" "),t("li",[s._v("合并型策略是 data，通过 set 方法进行合并和重新赋值，就是将新的同名参数替代旧的参数；")]),s._v(" "),t("li",[s._v("队列型策略有生命周期函数和 watch，原理是将函数存入一个数据，然后正序遍历依次执行。")]),s._v(" "),t("li",[s._v("叠加型有 component、directives、filters，通过原型链进行层层的叠加。")])]),s._v(" "),t("h3",{attrs:{id:"四、面试官-说说你对-mixin-的理解"}},[s._v("四、面试官：说说你对 mixin 的理解")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("回答：mixin 是一种类，在 vue 中就是 js 文件，主要的作用是作为功能模块引用。因为在项目中，可能不同组件会有相同的功能，比如控制元素的显示和隐藏，如果他们的变量和规则也完全相同的话，就可以把这个功能单独提取出来，放在 mixin.js 中，再引入，就可以实现一样的功能了。引入的方法也分为全局混入和局部混入，局部混入就是在每个组件中引入，全局混入就是在 main.js 中通过 Vue.mixin()引入。")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);